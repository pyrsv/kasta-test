{"version":3,"sources":["assets/logo.svg","components/UI/Tooltip/Tooltip.js","components/UI/Input/Input.js","components/UI/Button/Button.js","components/UI/Checkbox/Checkbox.js","components/Countdown/Countdown.js","components/PaymentForm/PaymentForm.js","components/UI/Backdrop/Backdrop.js","components/UI/CloseButton/CloseButton.js","components/Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tooltip","props","className","data-tip","data-for","name","place","id","type","effect","overridePosition","left","top","tip","Input","config","mask","control","value","label","placeholder","errorMessage","isValid","touched","localMask","map","regexStr","split","includes","RegExp","isInvalid","htmlFor","length","onChange","onBlur","guide","autoComplete","Button","onClick","text","Checkbox","checked","Countdown","calculateTimeLeft","difference","final","Date","timeLeft","hours","Math","floor","minutes","seconds","useState","setTimeLeft","useEffect","setTimeout","PaymentForm","form","card","controls","expiryDate","cardHolder","CVV","setForm","rememberCard","setRememberCard","isSubmitted","setSubmitted","handleControlsChange","event","currentForm","currentControl","target","handleValidate","join","validationRegex","validation","regex","forEach","test","closeHandler","icon","faCircle","faCreditCard","bind","preventDefault","formKeys","Object","keys","every","formData","reduce","console","log","Backdrop","cls","isOpen","push","children","CloseButton","Modal","src","logo","alt","React","Children","child","i","cloneElement","App","isModal","setModal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17451c0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.063ecc74.svg\";","import React from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport './Tooltip.scss'\r\n\r\nconst Tooltip = props => {\r\n  return (\r\n    <div className='TooltipWrapper'>\r\n      <span\r\n        className={'TooltipGlyph'}\r\n        data-tip\r\n        data-for={props.name + 'tooltip'}\r\n      >\r\n        ?\r\n      </span>\r\n      <ReactTooltip place='top'\r\n                    id={props.name + 'tooltip'}\r\n                    className={'Tooltip'}\r\n                    type={'light'}\r\n                    effect={'solid'}\r\n                    overridePosition={({left, top}) => {\r\n                      return {\r\n                        left,\r\n                        top: top + 5\r\n                      }\r\n                    }}\r\n      >\r\n          <span>\r\n            {props.tip}\r\n          </span>\r\n      </ReactTooltip>\r\n    </div>\r\n\r\n\r\n  )\r\n};\r\n\r\nexport default Tooltip","import React from 'react';\r\nimport MaskedInput from 'react-text-mask';\r\nimport Tooltip from '../Tooltip/Tooltip';\r\n\r\nimport './Input.scss'\r\n\r\nconst Input = props => {\r\n  const {mask = [], control: {name, value, label, placeholder, errorMessage, isValid, touched, tip}} = props.config;\r\n\r\n  const localMask = mask.map(regexStr => {\r\n    return regexStr.split('').includes('\\\\') ? new RegExp(regexStr) : regexStr;\r\n  });\r\n\r\n  const isInvalid = !isValid && touched;\r\n\r\n  return (\r\n    <div className={'FormControl'}>\r\n      <label\r\n        htmlFor={name}\r\n        className={'FormControl__Label'}\r\n      >\r\n        {label}\r\n        {tip &&\r\n        <Tooltip\r\n          name={name}\r\n          tip={tip}\r\n        />\r\n        }\r\n\r\n      </label>\r\n      {localMask.length > 0\r\n        ? <MaskedInput\r\n          value={value}\r\n          className={'FormControl__Input'}\r\n          id={name}\r\n          name={name}\r\n          placeholder={placeholder}\r\n          mask={localMask}\r\n          onChange={props.onChange}\r\n          onBlur={props.onBlur}\r\n          guide={false}\r\n          autoComplete={'off'}\r\n        />\r\n        : <input\r\n          type=\"text\"\r\n          value={value}\r\n          className={'FormControl__Input'}\r\n          id={name}\r\n          name={name}\r\n          placeholder={placeholder}\r\n          onChange={props.onChange}\r\n          onBlur={props.onBlur}\r\n          autoComplete={'off'}\r\n        />\r\n      }\r\n\r\n      {isInvalid\r\n        ? <span className={'FormControl__ErrorMessage'}> {errorMessage} </span>\r\n        : null\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nimport './Button.scss'\r\n\r\nconst Button = props => {\r\n\r\n  return (\r\n    <button\r\n      className={'Button'}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.text}\r\n    </button>\r\n  )\r\n};\r\n\r\nexport default Button","import React from 'react';\r\nimport Tooltip from '../Tooltip/Tooltip';\r\n\r\nimport './Checkbox.scss'\r\n\r\nconst Checkbox = props => {\r\n\r\n  return (\r\n    <div className=\"CheckboxWrapper\">\r\n      <label\r\n        htmlFor={props.name}\r\n        className={'Checkbox'}\r\n      >\r\n        <input\r\n          className={'Checkbox__input'}\r\n          id={props.name}\r\n          type=\"checkbox\"\r\n          checked={props.checked}\r\n          onChange={props.onChange}\r\n        />\r\n        <span className={'Checkbox__text'}>\r\n          {props.text}\r\n          {props.tip &&\r\n            <Tooltip\r\n              name={props.name}\r\n              tip={props.tip}\r\n            />\r\n          }\r\n        </span>\r\n      </label>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Countdown.scss'\r\n\r\nconst Countdown = props => {\r\n\r\n\r\n  const calculateTimeLeft = () => {\r\n    const difference = props.final - +new Date();\r\n    let timeLeft = {};\r\n\r\n    if (difference > 0) {\r\n      timeLeft = {\r\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n        minutes: Math.floor((difference / 1000 / 60) % 60),\r\n        seconds: Math.floor((difference / 1000) % 60)\r\n      };\r\n    }\r\n\r\n    return timeLeft;\r\n  };\r\n\r\n  const [{hours, minutes, seconds}, setTimeLeft] = useState(calculateTimeLeft());\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n  });\r\n\r\n  return (\r\n    <div className={'CountdownTimer'}>\r\n      <span>{props.text} </span>\r\n      <span>\r\n        0{hours}:{minutes}:{seconds}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown","import React, {useState} from 'react';\r\nimport Input from '../UI/Input/Input';\r\nimport Button from '../UI/Button/Button';\r\nimport Checkbox from '../UI/Checkbox/Checkbox';\r\nimport Countdown from '../Countdown/Countdown';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCreditCard, faCircle} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport * as controls from '../../data/payment-controls'\r\nimport * as validation from '../../data/validation-service'\r\n\r\nimport './PaymentForm.scss'\r\n\r\n\r\nconst PaymentForm = props => {\r\n\r\n  const [{form, form: {card, expiryDate, cardHolder, CVV}}, setForm] = useState({\r\n    form: {\r\n      card: {...controls.card},\r\n      expiryDate: {...controls.expiryDate},\r\n      cardHolder: {...controls.cardHolder},\r\n      CVV: {...controls.CVV}\r\n    }\r\n  });\r\n\r\n  const [rememberCard, setRememberCard] = useState(false);\r\n\r\n  const [isSubmitted, setSubmitted] = useState(false);\r\n\r\n  const handleControlsChange = (control, event) => {\r\n    const currentForm = {...form};\r\n    const currentControl = currentForm[control];\r\n    currentControl.touched = true;\r\n    currentControl.value = event.target.value;\r\n    setForm({\r\n      form: currentForm\r\n    });\r\n  };\r\n\r\n  const handleValidate = (control) => {\r\n    const value = form[control].value.split(' ').join('');\r\n    const validationRegex = validation.default[control].regex;\r\n    const currentForm = {...form};\r\n    const currentControl = currentForm[control];\r\n\r\n    currentControl.isValid = false;\r\n    validationRegex.forEach(regex => {\r\n      //eslint-disable-next-line\r\n      new RegExp(regex).test(value) ? currentControl.isValid = true : null;\r\n    });\r\n\r\n    setForm({\r\n      form: currentForm\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formKeys = Object.keys(form);\r\n    let isFormValid;\r\n\r\n    formKeys.forEach(control => {\r\n      form[control].touched = true;\r\n      handleValidate(control);\r\n    });\r\n\r\n    isFormValid = formKeys.every(control => form[control].isValid === true);\r\n    if (isFormValid) {\r\n      const formData = {\r\n        ...formKeys.reduce((formData, control) => {\r\n          formData[control] = form[control].value;\r\n          return formData\r\n        }, {}),\r\n        rememberCard\r\n      };\r\n      setForm({\r\n        form: {\r\n          card: {...controls.card},\r\n          expiryDate: {...controls.expiryDate},\r\n          cardHolder: {...controls.cardHolder},\r\n          CVV: {...controls.CVV}\r\n        }\r\n      });\r\n      setSubmitted(true);\r\n\r\n      console.log(formData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"FormContainer\">\r\n      {isSubmitted\r\n        ?\r\n        <div>\r\n          <p>Оплата пройшла успішно</p>\r\n          <Button\r\n            text='Закрити'\r\n            onClick={props.closeHandler}\r\n          />\r\n        </div>\r\n        : <form className='PaymentForm'>\r\n          <div className=\"PaymentForm__Header\">\r\n            <div className=\"Card\">\r\n              <p className=\"Card__Heading\">\r\n                <FontAwesomeIcon className={'Card__Circle'} icon={faCircle}/>\r\n                Нова картка\r\n              </p>\r\n              <p className=\"Card__Description\">\r\n                Visa, Mastercard\r\n              </p>\r\n              <FontAwesomeIcon className={'Card__CardIcon'} icon={faCreditCard}/>\r\n\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"PaymentForm__Body\">\r\n            <div className=\"FormRow\">\r\n              <div className=\"FormCol--wide\">\r\n                <Input\r\n                  config={{\r\n                    control: card,\r\n                    mask: validation.card.mask\r\n                  }}\r\n                  onChange={handleControlsChange.bind(null, card.name)}\r\n                  onBlur={handleValidate.bind(null, card.name)}\r\n                />\r\n              </div>\r\n              <div className=\"FormCol--narrow\">\r\n                <Input\r\n                  config={{\r\n                    control: expiryDate,\r\n                    mask: validation.expiryDate.mask\r\n                  }}\r\n                  onChange={handleControlsChange.bind(null, expiryDate.name)}\r\n                  onBlur={handleValidate.bind(null, expiryDate.name)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"FormRow\">\r\n              <div className=\"FormCol--wide\">\r\n                <Input\r\n                  config={{\r\n                    control: cardHolder,\r\n                    mask: validation.cardHolder.mask\r\n                  }}\r\n                  onChange={handleControlsChange.bind(null, cardHolder.name)}\r\n                  onBlur={handleValidate.bind(null, cardHolder.name)}\r\n                />\r\n              </div>\r\n              <div className=\"FormCol--narrow\">\r\n                <Input\r\n                  config={{\r\n                    control: CVV,\r\n                    mask: validation.CVV.mask\r\n                  }}\r\n                  onChange={handleControlsChange.bind(null, CVV.name)}\r\n                  onBlur={handleValidate.bind(null, CVV.name)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='PaymentForm__Footer'>\r\n            <Checkbox\r\n              name={'remember'}\r\n              checked={rememberCard}\r\n              text={'Запам\\'ятати цю картку'}\r\n              onChange={() => {\r\n                setRememberCard(!rememberCard)\r\n              }}\r\n              tip={'Наступного разу можна буде вибрати збережену карту i оплатити вводячи тільки CVV'}\r\n            />\r\n            <div className=\"PaymentForm__actions\">\r\n              <Button\r\n                text={`Сплатити ${props.value} UAH`}\r\n                onClick={handleSubmit}\r\n              />\r\n              <Countdown\r\n                text={'Час до завершення платежу'}\r\n                final={+new Date() + 900 * 1000}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n        </form>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PaymentForm","import React from 'react';\r\n\r\nimport './Backdrop.scss'\r\n\r\nconst Backdrop = (props) => {\r\n  const cls = ['Backdrop'];\r\n  if (props.isOpen) {\r\n    cls.push('open')\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      className={cls.join(' ')}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Backdrop","import React from 'react';\r\n\r\nimport './CloseButton.scss'\r\n\r\nconst CloseButton = props => {\r\n  return (\r\n    <span\r\n      onClick={props.onClick}\r\n      className='CloseBtn'>\r\n      &times;\r\n    </span>\r\n  )\r\n};\r\n\r\nexport default CloseButton;","import React, {Fragment} from 'react';\r\nimport Backdrop from '../UI/Backdrop/Backdrop';\r\nimport CloseButton from '../UI/CloseButton/CloseButton';\r\nimport logo from '../../assets/logo.svg';\r\n\r\nimport './Modal.scss'\r\n\r\nconst Modal = (props) => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <Backdrop\r\n        isOpen={true}\r\n        onClick={props.closeHandler}\r\n      />\r\n      <div className=\"Modal\">\r\n        <div className=\"Modal__Header\">\r\n          <img className={'ModalLogo'} src={logo} alt=\"Kasta Logo\"/>\r\n          <div className=\"ModalTotal\">\r\n          <span className=\"ModalTotal__Label\">\r\n            До оплати\r\n          </span>\r\n            <span className=\"ModalTotal__Value\">\r\n                {props.value} UAH\r\n          </span>\r\n          </div>\r\n          <CloseButton onClick={props.closeHandler}/>\r\n        </div>\r\n\r\n        <div className=\"Modal__Body\">\r\n          {React.Children.map(props.children, (child, i) => {\r\n            return React.cloneElement(child, {\r\n              closeHandler: props.closeHandler,\r\n              value: props.value\r\n            })\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"Modal__Footer\">\r\n          <div className=\"FooterPayment\">\r\n            <img className={'FooterPayment__Image'}\r\n                 src=\"https://www.deac.eu/files/docs/text_image/big/deac-pci-logo1.png\" alt=\"PCI DSS Compilant\"/>\r\n            <img className={'FooterPayment__Image'}\r\n                 src=\"https://www.nicepng.com/png/full/136-1366983_mastercard-securecode.png\"\r\n                 alt=\"Mastercard Securecode\"/>\r\n            <img className={'FooterPayment__Image'}\r\n                 src=\"https://benyaizubrik.com/wp-content/uploads/verified-by-visa.png\" alt=\"Verified by Visa\"/>\r\n\r\n          </div>\r\n\r\n          <div className=\"FooterLogo\">\r\n            <img className={'ModalLogo'} src={logo} alt=\"Kasta Logo\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default Modal;","import React, {useState} from 'react';\nimport PaymentForm from './components/PaymentForm/PaymentForm'\nimport Button from './components/UI/Button/Button';\nimport Modal from './components/Modal/Modal';\n\nimport './App.scss';\n\nconst App = () => {\n  const [isModal, setModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Button\n        onClick={setModal.bind(null, !isModal)}\n        text='Открыть виджет'\n      />\n\n      {\n        isModal &&\n        <Modal\n          closeHandler={setModal.bind(null, !isModal)}\n          value={1000000}\n        >\n          <PaymentForm/>\n        </Modal>\n      }\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}